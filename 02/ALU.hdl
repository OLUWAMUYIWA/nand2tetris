// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    Mux16(a=x, sel=zx, out=x1); //if a pin is not specified it defaults to zero. this multiplexes two inputs: x, and 0
    Not16(in=x1, out=xNeg);
    Mux16(a=x1, b=xNeg, sel=nx, out=xOut); // now, choose between the possibly-zeroed x and the possiply-zeroed&negated x

    Mux16(a=y, sel=zy, out=y1);
    Not16(in=y1, out=yNeg);
    Mux16(a=y1, b=yNeg, sel=ny, out=yOut);

    Add16(a=xOut, b=yOut, out=added);
    And16(a=xOut, b=yOut, out=anded);
    Mux16(a=added, b=anded, sel=f, out=computed);

    Not16(in=computed, out=negated);
    Mux16(a=computed, b=negated, sel=no, out=out, out[0..7]=out1, out[8..15]=out2);

    // status bits
    Or8Way(in=out1, out=orred1);
    Or8Way(in=out2, out=orred2);
    Or(a=orred1, b=orred2, out=orred);
    Not(in=orred, out=zr); // output is zero is all the 16 bits orred through return a zero
    And(a=true, b=out2[7], out=ng); //output is negative if the MSB is set 

}